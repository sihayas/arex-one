generator client {
  provider = "prisma-client-js"
}
datasource db {
  provider = "postgresql"
  url = env("DATABASE_URL")
  relationMode = "prisma"
}

//User
model User {
  // Fields
  id            String           @id @default(cuid())
  email         String           @unique
  username      String           @unique
  bio           String?
  image         String
  emailVerified String?
  password_hash String?
  dateJoined    DateTime         @default(now()) @map(name: "date_joined")
  dateUpdated   DateTime         @updatedAt @map(name: "date_updated")
  lastLogin     DateTime?        @map(name: "last_login")
  lastActive    DateTime?        @map(name: "last_active")

  isBanned      Boolean          @default(false) @map(name: "is_banned")
  isDeleted     Boolean          @default(false) @map(name: "is_deleted")
  isSuspended   Boolean          @default(false) @map(name: "is_suspended")

  // Relations
  notifications Notification[]
  essentials     Essential[]
  following     Follows[]        @relation("following")
  followers     Follows[]        @relation("follower")
  record        Record[]
  replies       Reply[]
  likes         Like[]
  views         View[]
  settings      Settings? 
}

model Settings {
  id                  String   @id @default(cuid())
  userId              String   @unique
  email               Boolean  @default(true)
  push                Boolean  @default(true)


  isPrivate             Boolean  @default(false) @map(name: "is_private")
  isMinus               Boolean  @default(false) @map(name: "is_premium")
  followerNotifications Boolean  @default(true) @map(name: "follower_notification")
  replyNotifications    Boolean  @default(true) @map(name: "reply_notification")
  likeNotifications     Boolean  @default(true) @map(name: "like_notification")


  createdAt           DateTime @default(now()) @map(name: "created_at")
  updatedAt           DateTime @updatedAt @map(name: "updated_at")
  user                User     @relation(fields: [userId], references: [id])
}

model Essential {
  id        String   @id @default(cuid())
  userId    String
  albumId   String
  rank      Int?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user  User  @relation(fields: [userId], references: [id])
  album Album @relation(fields: [albumId], references: [id])

  @@index([userId])
  @@index([albumId])
}


model Follows {
  id           String     @id @default(cuid())
  followerId   String
  followingId  String

  follower     User       @relation("follower", fields: [followerId], references: [id])
  following    User       @relation("following", fields: [followingId], references: [id])
  activities   Activity[] @relation("ActivityFollow")

  @@index([followerId])
  @@index([followingId])
  @@unique([followerId, followingId])
}

model Album {
  id            String   @id @default(cuid())
  appleId       String   @unique
  name          String
  artist        String
  releaseDate   String
  averageRating Float    @default(0)
  lastUpdated   DateTime @default(now()) @updatedAt
  notes         String?  

  tracks        Track[]
  essentials     Essential[]
  record        Record[]
  views         View[]   @relation("AlbumViews")

  @@unique([id])
  @@index([appleId, id])
}

model Track {
  id           String @id @default(cuid())
  appleId      String @unique
  name         String
  albumId      String

  album        Album  @relation(fields: [albumId], references: [id])
  record       Record[]

  @@index ([albumId])
}

model Record {
  id          String    @id @default(cuid())
  type        RecordType
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  authorId    String

  // Sound type
  albumId     String?
  trackId     String?
  // Text type
  entryId     String?   @unique
  captionId   String?   @unique

  entry       Entry?
  caption     Caption?

  author      User      @relation(fields: [authorId], references: [id])
  album       Album?    @relation(fields: [albumId], references: [id])
  track       Track?    @relation(fields: [trackId], references: [id])

  activities  Activity[]  @relation("ActivityRecord")
  views       View[]      @relation("RecordViews")
  likes       Like[]
  replies     Reply[]

  @@index([authorId])
  @@index([albumId])
  @@index([trackId])
}

enum RecordType {
  ENTRY
  CAPTION
}

model Entry {
  id         String   @id @default(cuid())
  text       String
  rating     Float
  loved      Boolean  @default(false)
  replay     Boolean  @default(false)

  recordId   String   @unique
  record     Record   @relation(fields: [recordId], references: [id])

  @@index([id])
}

model Caption {
  id         String   @id @default(cuid())
  text       String?
  media      String?
  link       String?

  recordId   String   @unique
  record     Record   @relation(fields: [recordId], references: [id])

  @@index([id])
}

model Like {
  id         String      @id @default(cuid())
  authorId   String
  recordId   String?
  replyId    String?
  createdAt  DateTime    @default(now()) @map(name: "created_at")
  updatedAt  DateTime    @updatedAt @map(name: "updated_at")

  author     User        @relation(fields: [authorId], references: [id])
  record     Record?     @relation(fields: [recordId], references: [id])
  reply      Reply?      @relation(fields: [replyId], references: [id])
  activities Activity[]  @relation("ActivityLike")

  @@index([authorId])
  @@index([recordId])
  @@index([replyId])
}


model Reply {
  id          String      @id @default(cuid())
  content     String      
  rootReplyId String?
  replyToId   String?
  recordId    String
  authorId    String
  createdAt   DateTime    @default(now()) @map(name: "created_at")
  updatedAt   DateTime    @updatedAt @map(name: "updated_at")
  deletedAt   DateTime?   @map(name: "deleted_at")


  rootReply   Reply?      @relation("ReplyToRoot", fields: [rootReplyId], references: [id], onDelete: Restrict, onUpdate: Restrict)
  replyTo     Reply?      @relation("ReplyToReply", fields: [replyToId], references: [id], onDelete: Restrict, onUpdate: Restrict)
  record      Record      @relation(fields: [recordId], references: [id])
  author      User        @relation(fields: [authorId], references: [id])
  likes       Like[]
  replies     Reply[]     @relation("ReplyToReply")
  rootReplies Reply[]     @relation("ReplyToRoot")
  views       View[]      @relation("ReplyViews")
  activities  Activity[]  @relation("ActivityReply")

  @@index([recordId])
  @@index([authorId])
  @@index([replyToId])
  @@index([rootReplyId])
}


model Activity {
  id            String          @id @default(cuid())
  type          ActivityType
  referenceId   String
  createdAt     DateTime        @default(now()) @map(name: "created_at")
  updatedAt     DateTime        @updatedAt @map(name: "updated_at")

  // Polymorphic relations
  record        Record?         @relation("ActivityRecord", fields:  [referenceId], references: [id], map: "ActivityToRecord_fkey")
  like          Like?           @relation("ActivityLike",    fields: [referenceId], references: [id], map: "ActivityToLike_fkey")
  follow        Follows?        @relation("ActivityFollow",  fields: [referenceId], references: [id], map: "ActivityToFollow_fkey")
  reply         Reply?          @relation("ActivityReply",   fields: [referenceId], references: [id], map: "ActivityToReply_fkey")

  notifications Notification[]

  @@index([referenceId])
}


enum ActivityType {
  RECORD
  LIKE
  FOLLOWED
  FOLLOWED_BACK
  REPLY
}


model View {
  id          String   @id @default(cuid())
  viewType    ViewType
  referenceId String
  user        User     @relation(fields: [userId], references: [id])
  userId      String
  viewedAt    DateTime @default(now())
  record      Record?  @relation("RecordViews", fields: [referenceId], references: [id], map: "RecordToView_fkey")
  reply       Reply?   @relation("ReplyViews", fields: [referenceId], references: [id], map: "ReplyToView_fkey")
  album       Album?   @relation("AlbumViews", fields: [referenceId], references: [id], map: "AlbumToView_fkey")

  @@index([userId])
  @@index([referenceId])
}


enum ViewType {
  RECORD
  REPLY
  ALBUM
}

model Notification {
  id          String   @id @default(cuid())
  read        Boolean  @default(false)
  recipient   User     @relation(fields: [recipientId], references: [id])
  recipientId String
  activity    Activity @relation(fields: [activityId], references: [id])
  activityId  String

  @@index([recipientId])
  @@index([activityId])
}