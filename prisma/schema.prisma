generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["driverAdapters"]
}

datasource db {
  provider     = "sqlite"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

model User {
  apple_id      String         @unique
  id            String         @id
  email         String?        @unique
  username      String?        @unique
  bio           String?
  image         String?
  password_hash String?
  status        String?        @default("active")
  following     Follows[]      @relation("follower")
  followed_by   Follows[]      @relation("following")
  essentials    Essential[]
  notifications Notification[]
  entries       Entry[]
  feed_items    FeedItem[]
  replies       Reply[]
  hearts        Heart[]
  settings      Settings?
  flags         Flag[]

  sessions      Session[]
  oauthAccounts OauthAccount[]

  updated_at     DateTime?       @updatedAt
  last_active    DateTime?
  date_joined    DateTime     @default(now())
}

model Session {
  id         String   @id
  user_id    String
  expires_at DateTime
  user       User     @relation(references: [id], fields: [user_id], onDelete: Cascade)

  @@index([user_id])
}

model OauthAccount {
  providerId     String
  providerUserId String
  userId         String
  user           User   @relation(references: [id], fields: [userId], onDelete: Cascade)

  @@id([providerId, providerUserId])
  @@index([userId])
}

model Settings {
  id     String  @id @default(cuid())
  user_id String  @unique
  email  Boolean @default(true)
  push   Boolean @default(true)

  is_minus               Boolean @default(false)
  follow_notifications   Boolean @default(true)
  reply_notifications    Boolean @default(true)
  heart_notifications    Boolean @default(true)

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
  user      User     @relation(fields: [user_id], references: [id])
}

model Entry {
  id       String     @id @default(cuid())
  type     String     // 'artifact' or 'wisp', determines if a rating exists
  author_id String
  sound_id  String

  text    String?
  rating  Float?     // Exists only for 'artifact' types
  loved   Boolean?   @default(false) // Exists only for 'artifact' types
  replay  Boolean?   @default(false) // Exists only for 'artifact' types

  sound   Sound  @relation(fields: [sound_id], references: [id])
  author  User   @relation(fields: [author_id], references: [id])

  feed_items FeedItem[]
  hearts  Heart[]
  replies Reply[]
  is_deleted Boolean  @default(false)
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
  flags      Flag[]

  @@index([author_id])
  @@index([sound_id])
}

model FeedItem {
  id        String   @id @default(cuid())
  user_id   String   // ID of the user who will see this entry in their feed
  entry_id   String   // ID of the entry to be shown in the feed

  user      User     @relation(fields: [user_id], references: [id])
  entry     Entry    @relation(fields: [entry_id], references: [id])
  created_at DateTime @default(now())

  @@index([user_id])
  @@index([entry_id])
}

model Essential {
  id      String @id @default(cuid())
  user_id  String
  sound_id String
  rank    Int?

  user  User  @relation(fields: [user_id], references: [id])
  sound Sound @relation(fields: [sound_id], references: [id])

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  @@index([user_id])
  @@index([sound_id])
}


model Follows {
  id          String @id @default(cuid())
  follower_id  String
  following_id String

  follower   User       @relation("follower", fields: [follower_id], references: [id])
  following  User       @relation("following", fields: [following_id], references: [id])

  is_deleted Boolean @default(false)

  @@unique([follower_id, following_id])
  @@index([follower_id])
  @@index([following_id])
}



model Sound {
  id           String     @id @default(cuid())
  apple_id     String     @unique
  upc          String?    @unique  // album only
  isrc         String?    @unique  // song only
  type         String     // 'songs', 'albums'
  name         String
  artist_name   String
  release_date  String
  album_name    String?    // song only

  album_id      String?    // song only
  album        Sound?     @relation("AlbumSongs", fields: [album_id], references: [id], onDelete: Restrict, onUpdate: Restrict)
  Songs        Sound[]    @relation("AlbumSongs")

  ratings_count Int   @default(0)
  ratings_sum   Int   @default(0)
  avg_rating    Float @default(0)
  bayesian_avg  Float @default(0)

  created_at    DateTime   @default(now())
  updated_at    DateTime   @updatedAt

  essentials   Essential[]
  entries      Entry[]

  @@unique([id])
  @@index([id])
  @@index([apple_id])
  @@index([album_id])
}


model Heart {
  id          String  @id @default(cuid())
  author_id   String
  entry_id    String?
  reply_id    String?

  author     User       @relation(fields: [author_id], references: [id])
  entry      Entry?     @relation(fields: [entry_id], references: [id])
  reply      Reply?     @relation(fields: [reply_id], references: [id])

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
  is_deleted Boolean  @default(false)

  @@index([author_id])
  @@index([entry_id])
  @@index([reply_id])
}

model Reply {
  id         String  @id @default(cuid())
  text       String
  reply_to_id  String?
  root_id     String?
  entry_id    String
  author_id   String

  reply_to     Reply?   @relation("ReplyParent", fields: [reply_to_id], references: [id], onDelete: Restrict, onUpdate: Restrict)
  replies     Reply[]  @relation("ReplyParent")
  root        Reply?   @relation("RootToReplies", fields: [root_id], references: [id], onDelete: Restrict, onUpdate: Restrict)
  root_replies Reply[]  @relation("RootToReplies")
  author      User     @relation(fields: [author_id], references: [id])
  entry       Entry    @relation(fields: [entry_id], references: [id])
  hearts      Heart[]

  flags      Flag[]

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  is_deleted Boolean @default(false)

  @@index([reply_to_id])
  @@index([root_id])

}


model Activity {
  id           String    @id @default(cuid())
  type         String    // 'entry', 'heart', 'reply', 'follow'
  reference_id  String

  created_at    DateTime  @default(now())
  is_deleted    Boolean   @default(false)
  notifications Notification[]

  @@index([reference_id]) // Composite index for performance
}

model Notification {
  id          String   @id @default(cuid())
  recipient   User     @relation(fields: [recipent_id], references: [id])
  recipent_id String
  activity    Activity @relation(fields: [activity_id], references: [id])
  activity_id  String

  key        String?
  is_deleted Boolean  @default(false)
  is_read    Boolean  @default(false)
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  @@index([recipent_id])
  @@index([activity_id])
}

model Flag {
  id          String   @id @default(cuid())
  author_id   String
  reference_id String
  type        String   // 'entry' or 'reply'
  resolved    Boolean  @default(false)
  created_at   DateTime @default(now())

  flagged_by User @relation(fields: [author_id], references: [id])
  entry Entry? @relation(fields: [reference_id], references: [id])
  reply Reply? @relation(fields: [reference_id], references: [id])

  @@index([author_id])
  @@index([reference_id])
}
