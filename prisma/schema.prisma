generator client {
  provider = "prisma-client-js"
}
datasource db {
  provider = "postgresql"
  url = env("DATABASE_URL")
  relationMode = "prisma"
}

//User
model User {
  id            String           @id @default(cuid())
  email         String           @unique
  username      String           @unique
  bio           String?          @db.VarChar(50)
  image         String
  emailVerified Boolean          @default(false) @map(name: "email_verified")
  password_hash String?
  dateJoined    DateTime         @default(now()) @map(name: "date_joined")
  dateUpdated   DateTime         @updatedAt @map(name: "date_updated")
  lastLogin     DateTime?        @map(name: "last_login")
  lastActive    DateTime?        @map(name: "last_active")
  isBanned      Boolean          @default(false) @map(name: "is_banned")
  isDeleted     Boolean          @default(false) @map(name: "is_deleted")
  isSuspended   Boolean          @default(false) @map(name: "is_suspended")
  following     Follows[]    @relation("follower")
  followedBy    Follows[]    @relation("following")
  essentials    Essential[]
  notifications Notification[]
  artifact      Artifact[]
  replies       Reply[]
  hearts        Heart[]
  views         View[]
  settings      Settings?
}

model Settings {
  id                  String   @id @default(cuid())
  userId              String   @unique
  email               Boolean  @default(true)
  push                Boolean  @default(true)


  isPrivate             Boolean  @default(false) @map(name: "is_private")
  isMinus               Boolean  @default(false) @map(name: "is_premium")
  followerNotifications Boolean  @default(true) @map(name: "follower_notifications")
  replyNotifications    Boolean  @default(true) @map(name: "reply_notifications")
  heartNotifications     Boolean  @default(true) @map(name: "heart_notifications")


  createdAt           DateTime @default(now()) @map(name: "created_at")
  updatedAt           DateTime @updatedAt @map(name: "updated_at")
  user                User     @relation(fields: [userId], references: [id])
}

model Essential {
  id        String   @id @default(cuid())
  userId    String
  soundId   String
  rank      Int?

  user  User  @relation(fields: [userId], references: [id])
  sound Sound @relation(fields: [soundId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([userId])
  @@index([soundId])
}


model Follows {
  id           String     @id @default(cuid())
  followerId   String
  followingId  String

  follower   User   @relation("follower", fields: [followerId], references:[id])
  following  User   @relation("following", fields: [followingId], references:[id])
  activities   Activity[] @relation("ActivityFollow")

  isDeleted    Boolean    @default(false) @map(name: "is_deleted")

  @@index([followerId])
  @@index([followingId])
  @@unique([followerId, followingId])
}

enum SoundType {
  albums
  songs
}


model Sound {
  id          String   @id @default(cuid())
  appleId     String   @unique
  type        SoundType
  rating      Float    @default(0)

  attributes  Attributes @relation(fields: [attributesId], references:[id])
  attributesId String

  albumId      String?
  album        Sound?      @relation("AlbumSongs", fields: [albumId], references: [id], onDelete: Restrict, onUpdate: Restrict)
  Songs        Sound[]     @relation("AlbumSongs")

  essentials    Essential[]
  artifact      Artifact[]
  metrics       Metrics[]

  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  @@unique([id])
  @@index([appleId, id])
}


model Attributes{
  id          String   @id @default(cuid())
  name        String
  artistName  String
  releaseDate String
  albumName   String?

  sound      Sound[]

  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  @@unique([id])
}

model Metrics{
  id          String   @id @default(cuid())
  soundId     String
  views       View[]

  sound       Sound    @relation(fields: [soundId], references: [id])
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}


model View {
  id          String   @id @default(cuid())
  user        User     @relation(fields: [userId], references: [id])
  userId      String
  viewedAt    DateTime @default(now())
  metrics     Metrics[]

  @@index([userId])
}

enum ArtifactType {
  entry // A rating post
  wisp // A non-rating post
}

model Artifact {
  id          String    @id @default(cuid())
  type        ArtifactType
  authorId    String
  soundId     String

  sound       Sound     @relation(fields: [soundId], references: [id])
  author      User      @relation(fields: [authorId], references: [id])

  hearts      Heart[]
  replies     Reply[]
  content     Content?

  isDeleted   Boolean   @default(false) @map(name: "is_deleted")
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  activities  Activity[]  @relation("ActivityArtifact")

  @@index([authorId])
  @@index([soundId])
}

model Content {
  id         String   @id @default(cuid())
  text       String

  rating     Float?
  loved      Boolean?  @default(false)
  replay     Boolean?  @default(false)

  artifact   Artifact  @relation(fields: [artifactId], references: [id])
  artifactId String

  @@index([id])
  @@unique([artifactId])
}

model Heart {
  id         String      @id @default(cuid())
  authorId   String
  artifactId String?
  replyId    String?

  author     User        @relation(fields: [authorId], references: [id])
  artifact   Artifact?     @relation(fields: [artifactId], references: [id])
  reply      Reply?      @relation(fields: [replyId], references: [id])
  activities Activity[]  @relation("ActivityHeart")

  createdAt  DateTime    @default(now()) @map(name: "created_at")
  updatedAt  DateTime    @updatedAt @map(name: "updated_at")
  isDeleted  Boolean     @default(false) @map(name: "is_deleted")

  @@index([authorId])
  @@index([artifactId])
  @@index([replyId])
}

model Reply {
  id           String      @id @default(cuid())
  text         String
  replyToId    String?
  artifactId   String
  authorId     String
  isDeleted    Boolean     @default(false)

  // Relationships
  replyTo      Reply?      @relation("ReplyHierarchy", fields: [replyToId], references: [id], onDelete: Restrict, onUpdate: Restrict)
  artifact     Artifact    @relation(fields: [artifactId], references: [id])
  author       User        @relation(fields: [authorId], references: [id])
  replies      Reply[]     @relation("ReplyHierarchy") // Replies to this reply
  hearts       Heart[]
  activities   Activity[]  @relation("ActivityReply")

  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @updatedAt

  // Indexes
  @@index([artifactId, authorId, replyToId])
}



model Activity {
  id            String          @id @default(cuid())
  type          ActivityType
  referenceId   String
  createdAt     DateTime        @default(now()) @map(name: "created_at")
  updatedAt     DateTime        @updatedAt @map(name: "updated_at")

  // Polymorphic relations
  artifact      Artifact?      @relation("ActivityArtifact", fields:  [referenceId], references: [id], map: "ActivityToArtifact_fkey")
  heart         Heart?         @relation("ActivityHeart",    fields: [referenceId], references: [id], map: "ActivityToHeart_fkey")
  follow        Follows?       @relation("ActivityFollow",  fields: [referenceId], references: [id], map: "ActivityToFollow_fkey")
  reply         Reply?         @relation("ActivityReply",   fields: [referenceId], references: [id], map: "ActivityToReply_fkey")

  isDeleted     Boolean         @default(false) @map(name: "is_deleted")
  notifications Notification[]

  @@index([referenceId])
}

enum ActivityType {
  artifact
  heart
  followed
  followed_back
  reply
}

model Notification {
  id              String   @id @default(cuid())
  recipient       User     @relation(fields: [recipientId], references: [id])
  recipientId     String
  activity        Activity @relation(fields: [activityId], references: [id])
  activityId      String

  aggregation_Key String?
  isDeleted       Boolean  @default(false) @map(name: "is_deleted")

  @@index([recipientId])
  @@index([activityId])
}