// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schem

generator client {
  provider = "prisma-client-js"
}
datasource db {
  provider = "mysql"
  url = env("DATABASE_URL")
  relationMode = "prisma"
}

model Account {
  id                 String  @id @default(cuid())
  userId             String  @map("user_id")
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String? @db.MediumText
  access_token       String? @db.MediumText
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String? @db.MediumText
  session_state      String? @db.MediumText
  oauth_token_secret String? @db.MediumText
  oauth_token        String? @db.MediumText
  user               User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
}


model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model VerificationToken {
  id         Int      @id @default(autoincrement())
  identifier String
  token      String
  expires    DateTime

  @@unique([identifier, token])
}

//User
model User {
  notifications Notification[]
  id            String    @id @default(cuid())
  username      String?   @unique
  name          String
  bio           String?
  email         String    @unique
  image         String?
  emailVerified String?
  password      String?
  favorites     Favorite[]
  following     Follows[] @relation("following")
  followers     Follows[] @relation("follower")
  reviews       Review[]
  replies       Reply[]
  likes         Like[]
  dateJoined    DateTime  @default(now()) @map(name: "date_joined")
  dateUpdated   DateTime  @updatedAt @map(name: "date_updated")
  accounts      Account[]
  sessions      Session[]
}


model Follows {
  activities Activity[]
  id          String   @id @default(cuid())
  follower    User     @relation("follower", fields: [followerId], references: [id])
  followerId  String
  following   User     @relation("following", fields: [followingId], references: [id])
  followingId String

  @@index([followerId])
  @@index([followingId])
  @@unique([followerId, followingId])
}

model Album {
  id            String    @id
  tracks        Track[]
  name          String
  artist        String
  releaseDate   String
  averageRating Float?    @default(0)  
  lastUpdated   DateTime  @default(now()) @updatedAt
  reviews       Review[]
  notes         String?   @db.MediumText
  favorites     Favorite[]

  viewsCount    Int      @default(0) // Track number of views
  listenedCount Int      @default(0) // Track number of listens
  ratingsCount  Int      @default(0) // Track number of ratings
  reviewsCount  Int      @default(0) // Track number of revews
  lovedCount    Int      @default(0) // Track number of loved reviews

  @@unique([id])
}

model Track {
  id            String    @id @default(cuid())
  name          String
  duration      Int
  album         Album     @relation(fields: [albumId], references: [id])
  albumId       String
  reviews       Review[]

  @@index ([albumId])
}

model Review {
  activities Activity[]
  id        String    @id @default(cuid())
  album     Album?     @relation(fields: [albumId], references: [id])
  albumId   String
  track     Track?    @relation(fields: [trackId], references: [id])
  trackId   String?
  permalink String    @unique
  rating    Float
  loved     Boolean   @default(false)
  replay    Boolean   @default(false)
  content   String?   @db.MediumText
  likes     Like[]
  replies   Reply[]
  published Boolean   @default(false)
  author    User      @relation(fields: [authorId], references: [id])
  authorId  String
  createdAt DateTime  @default(now()) @map(name: "created_at")
  updatedAt DateTime  @updatedAt @map(name: "updated_at")

  viewsCount    Int      @default(0) // Track number of views

  @@index([albumId])
  @@index([authorId])
  @@index([trackId])
}

//Diary is just review without text, Rating is just a rating score no tags + no listened (obvious), no comments

model Like {
  activities Activity[]
  id        String   @id @default(cuid())
  author    User     @relation(fields: [authorId], references: [id])
  authorId  String
  review    Review?  @relation(fields: [reviewId], references: [id])
  reviewId  String?
  reply     Reply?   @relation(fields: [replyId], references: [id])
  replyId String?
  createdAt DateTime @default(now()) @map(name: "created_at")
  updatedAt DateTime @updatedAt @map(name: "updated_at")

  @@index([authorId])
  @@index([reviewId])
  @@index([replyId])
}


model Reply {
  activities  Activity[]
  id          String    @id @default(cuid())
  content     String    @db.MediumText
  rootReply   Reply?    @relation("ReplyToRoot", fields: [rootReplyId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  rootReplyId String?
  replyTo     Reply?    @relation("ReplyToReply", fields: [replyToId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  replyToId   String?
  review      Review    @relation(fields: [reviewId], references: [id])
  reviewId    String
  replies     Reply[]   @relation("ReplyToReply")
  rootReplies Reply[]   @relation("ReplyToRoot")
  author      User      @relation(fields: [authorId], references: [id])
  authorId    String
  likes       Like[]
  createdAt   DateTime  @default(now()) @map(name: "created_at")
  updatedAt   DateTime  @updatedAt @map(name: "updated_at")

  @@index([reviewId])
  @@index([authorId])
  @@index([replyToId])
  @@index([rootReplyId])
}

model Favorite {
  id        String  @id @default(cuid())
  user     User    @relation(fields: [userId], references: [id])
  userId   String
  album     Album   @relation(fields: [albumId], references: [id])
  albumId   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([userId])
  @@index([albumId])
}

model Activity {
  id          String       @id @default(cuid())
  type        String
  createdAt   DateTime     @default(now()) @map(name: "created_at")
  updatedAt   DateTime     @updatedAt @map(name: "updated_at")

  // Polymorphic relations
  review      Review?      @relation(fields: [reviewId], references: [id])
  reviewId    String?
  like        Like?        @relation(fields: [likeId], references: [id])
  likeId      String?
  follow      Follows?     @relation(fields: [followId], references: [id])
  followId    String?
  reply      Reply?        @relation(fields: [replyId], references: [id])
  replyId    String?


  notifications Notification[]

  @@index([reviewId])
  @@index([likeId])
  @@index([followId])
  @@index([replyId])
}



model Notification {
  id          String   @id @default(cuid())
  read        Boolean  @default(false)
  recipient   User     @relation(fields: [recipientId], references: [id])
  recipientId String
  activity    Activity @relation(fields: [activityId], references: [id])
  activityId  String

  @@index([recipientId])
  @@index([activityId])
}
